}
return(corrv)
}
class(datagood)
class(data)
class(nobs)
class(corrv)
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
data <- data.frame() #creates an empty data frame
datagood <- data.frame()
corrv <- numeric(0)
for (i in 1:length(files_full)) {
data <- rbind(data, read.csv(files_full[i]))
datagood <- complete.cases(data)
nobs <- sum(datagood)
if (nobs > threshold) {
corrv <- append(corrv, cor(datagood$sulfate, datagood$nitrate, use = "complete.obs"))
}
}
return(corrv)
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
data <- data.frame() #creates an empty data frame
corrv <- numeric(0)
for (i in 1:length(files_full)) {
data <- rbind(data, read.csv(files_full[i]))
datagood <- data.frame()
datagood <- complete.cases(data)
nobs <- sum(datagood)
if (nobs > threshold) {
corrv <- append(corrv, cor(datagood$sulfate, datagood$nitrate, use = "complete.obs"))
}
}
return(corrv)
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
data <- data.frame() #creates an empty data frame
corrv <- numeric(0)
for (i in 1:length(files_full)) {
data <- rbind(data, read.csv(files_full[i]))
datagood <- data.frame()
datagood <- data(complete.cases(data))
nobs <- sum(datagood)
if (nobs > threshold) {
corrv <- append(corrv, cor(datagood$sulfate, datagood$nitrate, use = "complete.obs"))
}
}
return(corrv)
}
cr <- corr("specdata", 150)
class(datagood)
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
data <- data.frame() #creates an empty data frame
corrv <- numeric(0)
for (i in 1:length(files_full)) {
data <- rbind(data, read.csv(files_full[i]))
datagood <- (complete.cases(data)
nobs <- sum(datagood)
if (nobs > threshold) {
corrv <- append(corrv, cor(data$sulfate, data$nitrate, use = "complete.obs"))
return(corrv)
}
}
}
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
data <- data.frame() #creates an empty data frame
corrv <- numeric(0)
for (i in 1:length(files_full)) {
data <- rbind(data, read.csv(files_full[i]))
datagood <- (complete.cases(data)
nobs <- sum(datagood)
if (nobs > threshold) {
corrv <- append(corrv, cor(data$sulfate, data$nitrate, use = "complete.obs"))
}
return(corrv)
}
}
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
data <- data.frame() #creates an empty data frame
corrv <- numeric(0)
for (i in 1:length(files_full)) {
data <- rbind(data, read.csv(files_full[i]))
datagood <- (complete.cases(data)
nobs <- sum(datagood)
if (nobs > threshold) {
corrv <- append(corrv, cor(data$sulfate, data$nitrate, use = "complete.obs"))
}
}
return(corrv)
}
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
data <- data.frame() #creates an empty data frame
corrv <- numeric()
for (i in 1:length(files_full)) {
data <- rbind(data, read.csv(files_full[i]))
datagood <- complete.cases(data)
nobs <- sum(datagood)
}
if (nobs > threshold) {
corrv <- append(corrv, cor(datagood$sulfate, datagood$nitrate, use = "complete.obs"))
}
return(corrv)
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
data <- data.frame() #creates an empty data frame
corrv <- numeric()
for (i in 1:length(files_full)) {
data <- c(data, read.csv(files_full[i]))
datagood <- complete.cases(data)
nobs <- sum(datagood)
}
if (nobs > threshold) {
corrv <- append(corrv, cor(datagood$sulfate, datagood$nitrate, use = "complete.obs"))
}
return(corrv)
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
data <- data.frame() #creates an empty data frame
corrv <- numeric()
for (i in 1:length(files_full)) {
data <- rbind(data, read.csv(files_full[i]))
datagood <- complete.cases(data)
nobs <- sum(datagood)
}
if (nobs > threshold) {
corrv <- append(corrv, cor(datagood$sulfate, datagood$nitrate, use = "complete.obs"))
}
return(corrv)
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
data <- data.frame() #creates an empty data frame
corrv <- numeric()
for (i in 1:length(files_full)) {
data <- read.csv(files_full[i]))
datagood <- complete.cases(data)
nobs <- sum(datagood)
}
if (nobs > threshold) {
corrv <- append(corrv, cor(datagood$sulfate, datagood$nitrate, use = "complete.obs"))
}
return(corrv)
}
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
data <- data.frame() #creates an empty data frame
corrv <- numeric()
for (i in 1:length(files_full)) {
data <- rbind(data, read.csv(files_full[i]))
datagood <- complete.cases(data)
nobs <- sum(datagood)
}
if (nobs > threshold) {
corrv <- append(corrv, cor(datagood$sulfate, datagood$nitrate, use = "complete.obs"))
}
return(corrv)
}
lenght
length
length(files_full)
?length
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
data <- data.frame() #creates an empty data frame
corrv <- numeric()
for (i in 1:length(files_full)) {
data <- rbind(data, read.csv(files_full[i]))
datagood <- complete.cases(data)
nobs <- sum(datagood)
datagood_frame <- data.frame(datagood_frame, datagood)
}
if (nobs > threshold) {
corrv <- append(corrv, cor(datagood_frame$sulfate, datagood_frame$nitrate, use = "complete.obs"))
}
return(corrv)
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
data <- data.frame() #creates an empty data frame
corrv <- numeric()
for (i in 1:length(files_full)) {
data <- rbind(data, read.csv(files_full[i]))
datagood <-na.omit(data);
nobs <- sum(datagood)
if (nobs > threshold) {
corrv <- append(corrv, cor(datagood_frame$sulfate, datagood_frame$nitrate, use = "complete.obs"))
}
}
return(corrv)
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
data <- data.frame() #creates an empty data frame
corrv <- numeric() # define numeric vector indicating number of completely observations on all variables
for (i in 1:length(files_full)) {
data <- rbind(data, read.csv(files_full[i]))
datagood <- na.omit(data)
nobs <- sum(datagood)
if (nobs > threshold) {
nitrate <- datagood@nitrate
sulfate <- datagood@sulfate
corrv <- cor(datagood$nitrate, datagood$sulfate)
}
}
return(corrv)
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
data <- data.frame() #creates an empty data frame
corrv <- numeric() # define numeric vector indicating number of completely observations on all variables
for (i in 1:length(files_full)) {
data <- rbind(data, read.csv(files_full[i]))
datagood <- na.omit(data)
nobs <- sum(datagood)
if (nobs > threshold) {
nitrate <- datagood@nitrate
sulfate <- datagood@sulfate
corrv <- append(corrv, cor(datagood$nitrate, datagood$sulfate))
}
}
return(corrv)
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
nobs_vector <- numeric() # define numeric vector indicating number of completely observations on all variables
for (i in 1:length(files_full)) {
data <- read.csv(files_full[i]) # loops through the files, finding complete cases
datagood <- complete.cases(data)
nobs <- sum(datagood)
nobs_vector <- c(nobs_vector, nobs)
if (nobs > threshold) {
nitrate <- datagood@nitrate
sulfate <- datagood@sulfate
corrv <- append(corrv, cor(datagood$nitrate, datagood$sulfate))
}
}
return(corrv)
}
cr <- corr("specdata", 150)
class(datagood)
class(data)
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
nobs_vector <- numeric() # define numeric vector indicating number of completely observations on all variables
for (i in 1:length(files_full)) {
data <- read.csv(files_full[i]) # loops through the files, finding complete cases
datagood <- datagood <-na.omit(data)
nobs <- sum(datagood)
nobs_vector <- c(nobs_vector, nobs)
if (nobs > threshold) {
nitrate <- datagood@nitrate
sulfate <- datagood@sulfate
corrv <- append(corrv, cor(datagood$nitrate, datagood$sulfate))
}
}
return(corrv)
}
cr <- corr("specdata", 150)
cr <- corr("specdata", 150)
?sum
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
nobs_vector <- numeric() # define numeric vector indicating number of completely observations on all variables
for (i in 1:length(files_full)) {
data <- read.csv(files_full[i]) # loops through the files, finding complete cases
datagood <- datagood <-na.omit(data)
nobs <- nrow(datagood)
nobs_vector <- c(nobs_vector, nobs)
if (nobs > threshold) {
nitrate <- datagood@nitrate
sulfate <- datagood@sulfate
corrv <- append(corrv, cor(datagood$nitrate, datagood$sulfate))
}
}
return(corrv)
}
cr <- corr("specdata", 150)
tcorr <- function(fname) {
data <- read.csv(file.path(directory, fname))
nobs <- sum(complete.cases(data))
if (nobs > threshold) {
return (cor(data$nitrate, data$sulfate, use="complete.obs"))
}
}
tcorrs <- sapply(list.files(directory), tcorr) #get all correlations + NULLs
tcorrs <- unlist(tcorrs[!sapply(tcorrs, is.null)]) #remove NULLs
return (tcorrs)
corr <- function(directory = "directory", threshold = 0){
results <- numeric(0)
mydata1 <- complete(directory)
mydata2 <- subset(mydata1, nobs > threshold)
filenames <- as.character(list.files())
if(nrow(mydata2) > 0){
for(i in mydata2$id){
mydata3 <- read.csv(filenames[i])
mydata <- na.omit(mydata3)
results = append(results, cor(mydata$nitrate, mydata$sulfate))
}
return(results)
}
else{
#results <- c("numeric", length = 0)
return (results)
}
}
source("complete.R")
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
nobs_vector <- numeric() # define numeric vector indicating number of completely observations on all variables
for (i in 1:length(files_full)) {
data <- read.csv(files_full[i]) # loops through the files, finding complete cases
datagood <- datagood <-na.omit(data)
nobs <- nrow(datagood)
nobs_vector <- c(nobs_vector, nobs)
if (nobs_vector > threshold) {
nitrate <- datagood@nitrate
sulfate <- datagood@sulfate
corrv <- append(corrv, cor(datagood$nitrate, datagood$sulfate))
}
}
return(corrv)
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
nobs_vector <- numeric() # define numeric vector indicating number of completely observations on all variables
corrv <- numeric()
for (i in 1:length(files_full)) {
data <- read.csv(files_full[i]) # loops through the files, finding complete cases
datagood <- datagood <-na.omit(data)
nobs <- nrow(datagood)
nobs_vector <- c(nobs_vector, nobs)
if (nobs_vector > threshold) {
nitrate <- datagood@nitrate
sulfate <- datagood@sulfate
corrv <- append(corrv, cor(datagood$nitrate, datagood$sulfate))
}
}
return(corrv)
}
cr <- corr("specdata", 150)
warnings()
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
corrv <- numeric()
for (i in 1:length(files_full)) {
data <- read.csv(files_full[i]) # loops through the files, finding complete cases
datagood <- datagood <-na.omit(data)
nobs <- nrow(datagood)
if (nobs > threshold) {
nitrate <- datagood@nitrate
sulfate <- datagood@sulfate
corrv <- append(corrv, cor(datagood$nitrate, datagood$sulfate))
}
}
return(corrv)
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
directory <- as.character(directory)
files_full <- list.files(directory, full.names = TRUE) #creates a list of files
corrv <- numeric()
for (i in 1:length(files_full)) {
data <- read.csv(files_full[i]) # loops through the files, finding complete cases
datagood <- datagood <-na.omit(data)
nobs <- nrow(datagood)
if (nobs > threshold) {
nitrate <- datagood$nitrate
sulfate <- datagood$sulfate
corrv <- append(corrv, cor(nitrate, sulfate))
}
}
return(corrv)
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
library(datasets)
data(iris)
s <- split(iris, iris$Species)
lapply(iris, mean)
with(iris, tapply("Sepal.Length", "Species", mean))
mean(iris[iris$Species == "virginica", "Sepal.Length"])
tapply(iris$Species == "virginica", "Sepal.Length", mean)
tapply(iris$Species, "Sepal.Length", mean)
library(datasets)
data(iris)
s <- split(iris, iris$Species)
tapply(iris$Species, "Sepal.Length", mean)
lapply(s, function(x) colMeans(x[, "Sepal.Length", "Sepal.Width", "Petal.Lenght", "Petal.Width"]))
library(datasets)
data(iris)
s <- split(iris, iris$Species)
lapply(s, function(x) colMeans(x[, "Sepal.Length"]))
s <- split(iris[, c("Sepal.Length", "Sepal.Width", "Petal.Lenght", "Petal.Width")], iris$Species)
solution_question = tapply(iris$Sepal.Length, list(iris$Species), mean)
solution_question
solution_question = tapply(iris$Sepal.Length, iris$Species, mean)
solution_question
solution_question = tapply(iris$Species, iris$Sepal.Length, mean)
warning()
solution_question
s
s <- split(iris, iris$Species)
lapply(s, function(x) colMeans(x[, "Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")]))
s <- split(iris[, c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")], iris$Species)
lapply(s, colMeans)
apply(iris[, 1:4], 2, mean)
$ git clone https://github.com/Ferry-data7ProgrammingAssignment2.git
git clone https://github.com/Ferry-data7ProgrammingAssignment2.git
## This is my solution to Assignment 2 of the Coursera MOOC "R Programming"
## The assignment concerns: Caching the Inverse of a Matrix
##
## For this assignment two functions are used:
##
## a. makeCacheMatrix
## This function is very useful as it creates a special "matrix" object that can cache its inverse.
##
## b. cacheSolve
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
##
## Extra note: Computing the inverse of a square matrix can be done with the solve function in R.
## If, for instance, X is a square invertible matrix, then solve(X) returns its inverse.
## Reading tip on what can be done with matrices: http://en.wikibooks.org/wiki/R_Programming/Mathematics
##
## Let's start with the first function: makeCacheMatrix
## This function does 4 things:
## 1. sets the value of the matrix;
## 2. gets the value of the matrix;
## 3. sets the value of the inverse;
## 4. gets the value of the inverse;
##
## The R-codes are as follows:
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Let's continue with the second function: cacheSolve
## This functions calculates the inverse of the matrix created with the first function makeCacheMatrix.
## This function does the following:
## 1. It checks to see if the inverse has already been calculated;
## 2. If this is the case, it gets the inverse from the cache and skips the computation;
## 3. If this is NOT the case, it calculates the inverse of the matrix and setst the value of the matrix in the cache.
##
## The R-codes are as follows:
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
